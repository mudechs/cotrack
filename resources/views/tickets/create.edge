@layout('layouts.app')

@section('content')
  <div class="container">
    @component('components.card', {
      antl,
      csrf,
      locale: auth.user.locale,
      title: 'static.neues_ticket_erstellen',
      styles: 'has-background-light has-rounded-white-border p-sm',
      footer: false
    })
      @slot('content')
        <form action="{{ route('ticketsStore') }}" method="post" enctype="multipart/form-data">
          {{ csrfField() }}

          @include('tickets.includes.formFields')

          <div class="has-text-right">
            <a href="{{ route('dashboard') }}" class="button is-text"><i class="fas fa-times"></i>&nbsp;&nbsp;{{ antl.forLocale(auth.user.locale).formatMessage('static.abbrechen') }}</a>
            <button type="submit" class="button is-info"><i class="far fa-paper-plane fa-fw"></i>&nbsp;&nbsp;{{ antl.forLocale(auth.user.locale).formatMessage('static.speichern') }}</button>
          </div>
        </form>
      @endslot
    @endcomponent
  </div>
@endsection

@section('js')
  <script>
    /* Zeige ein Select Menu mit den im ausgewÃ¤hlten Projekt zugewiesenen Members
      Falls der Member is_available auf false gesetzt hat, wird dieser zwar angezeigt, jedoch
      auf disabled gesetzt.
    */
    function projectSelectorHandler(event) {
      const projectId = event.target.value;
      const url = '/api/tickets/projectMembers/' + projectId;
      const recipientSelectWrapper = document.getElementById('recipientSelect');
      const affectedVersionSelectWrapper = document.getElementById('affectedVersionSelect');
      const resolvedVersionSelectWrapper = document.getElementById('resolvedVersionSelect');

      recipientSelectWrapper.innerHTML = '';
      affectedVersionSelectWrapper.innerHTML = '';
      resolvedVersionSelectWrapper.innerHTML = '';

      const recipientSelect = document.createElement('select');
      recipientSelect.name = 'recipient';
      recipientSelect.id = 'recipient';
      recipientSelect.className = 'select';

      const affectedVersionSelect = document.createElement('select');
      affectedVersionSelect.name = 'affected_version';
      affectedVersionSelect.id = 'affected_version';
      affectedVersionSelect.className = 'select';

      const resolvedVersionSelect = document.createElement('select');
      resolvedVersionSelect.name = 'resolved_version';
      resolvedVersionSelect.id = 'resolved_version';
      resolvedVersionSelect.className = 'select';

      axios.get(url)
      .then(function (response) {
        const { members, versions } = response.data;
        let recipientOption, affectedVersionOption, resolvedVersionOption;

        recipientOption = document.createElement('option');
        recipientOption.text = '';
        recipientSelect.add(recipientOption);

        affectedVersionOption = document.createElement('option');
        affectedVersionOption.text = '';
        affectedVersionSelect.add(affectedVersionOption);

        resolvedVersionOption = document.createElement('option');
        resolvedVersionOption.text = '';
        resolvedVersionSelect.add(resolvedVersionOption);

        members.forEach(element => {
          const fullName = element.first_name + " " + element.last_name;
          const available = element.is_available;

          let state = "";

          if(available == 0) {
            state = "disabled";
          }
          recipientOption = document.createElement('option');
          recipientOption.text = fullName;
          recipientOption.value = element.id;
          if(element.is_available === false) {
            recipientOption.disabled = true;
          }
          recipientSelect.add(recipientOption);
        })

        recipientSelectWrapper.appendChild(recipientSelect);
        recipientSelectWrapper.closest('.field').style.display = 'block';

        versions.forEach(element => {
          const title = element.title;

          affectedVersionOption = document.createElement('option');
          affectedVersionOption.text = title;
          affectedVersionOption.value = title;

          affectedVersionSelect.add(affectedVersionOption);
        })

        affectedVersionSelectWrapper.appendChild(affectedVersionSelect);
        affectedVersionSelectWrapper.closest('.field').style.display = 'block';

        versions.forEach(element => {
          const title = element.title;

          resolvedVersionOption = document.createElement('option');
          resolvedVersionOption.text = title;
          resolvedVersionOption.value = title;

          resolvedVersionSelect.add(resolvedVersionOption);
        })

        resolvedVersionSelectWrapper.appendChild(resolvedVersionSelect);
        resolvedVersionSelectWrapper.closest('.field').style.display = 'block';
      })
      .catch(function (error) {
        recipientSelectWrapper.innerHTML = '';
        recipientSelectWrapper.closest('.field').style.display = 'none';

        affectedVersionSelectWrapper.innerHTML = '';
        affectedVersionSelectWrapper.closest('.field').style.display = 'none';

        resolvedVersionSelectWrapper.innerHTML = '';
        resolvedVersionSelectWrapper.closest('.field').style.display = 'none';
      })
    }
  </script>
@endsection